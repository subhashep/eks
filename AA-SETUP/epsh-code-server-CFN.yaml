AWSTemplateFormatVersion: "2010-09-09"
Description: Creates a code-server IDE for the EKS workshop
Parameters:
  InstanceVolumeSize:
    Type: Number
    Description: The Size in GB of the CODE-SERVER Instance Volume.
    Default: 30
  RepositoryOwner:
    Type: String
    Description: The owner of the GitHub repository to be used to bootstrap CODE-SERVER
    Default: "aws-samples"
  RepositoryName:
    Type: String
    Description: The name of the GitHub repository to be used to bootstrap CODE-SERVER
    Default: "eks-workshop-v2"
  RepositoryRef:
    Type: String
    Description: The Git reference to be used to bootstrap CODE-SERVER
    Default: "main"
  ResourcesPrecreated:
    Type: String
    Description: Whether lab infrastructure has been pre-provisioned
    Default: "false"
    AllowedValues:
      - "false"
      - "true"
  AnalyticsEndpoint:
    Type: String
    Description: Analytics endpoint used for AWS events
    Default: ""
  CodeServerVersion:
    Type: String
    Description: Default code-server version to use
    Default: "4.91.1"
  AmiParameterStoreName:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64"
  Environment:
    Type: String
    Description: For testing purposes only
    Default: ""


  DefaultVpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select your default VPC

  DefaultSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Select a public subnet in your default VPC


Mappings:
  PrefixListID:
    ap-northeast-1:
      PrefixList: pl-58a04531
    ap-northeast-2:
      PrefixList: pl-22a6434b
    ap-south-1:
      PrefixList: pl-9aa247f3
    ap-southeast-1:
      PrefixList: pl-31a34658
    ap-southeast-2:
      PrefixList: pl-b8a742d1
    ca-central-1:
      PrefixList: pl-38a64351
    eu-central-1:
      PrefixList: pl-a3a144ca
    eu-north-1:
      PrefixList: pl-fab65393
    eu-west-1:
      PrefixList: pl-4fa04526
    eu-west-2:
      PrefixList: pl-93a247fa
    eu-west-3:
      PrefixList: pl-75b1541c
    sa-east-1:
      PrefixList: pl-5da64334
    us-east-1:
      PrefixList: pl-3b927c52
    us-east-2:
      PrefixList: pl-b6a144df
    us-west-1:
      PrefixList: pl-4ea04527
    us-west-2:
      PrefixList: pl-82a045eb
Resources:
  
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for IDE
      VpcId: !Ref DefaultVpcId
      SecurityGroupIngress:
        - Description: Allow HTTP from CloudFront
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourcePrefixListId: !FindInMap [PrefixListID, !Ref "AWS::Region", PrefixList]
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: -1
          CidrIp: 0.0.0.0/0
  EksWorkshopIdeLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
          - !Sub arn:aws:iam::${AWS::AccountId}:policy/EPSH-ADMIN-POLICY
      Path: "/"

  EksWorkshopIdeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
          - !Sub arn:aws:iam::${AWS::AccountId}:policy/EPSH-ADMIN-POLICY
      Path: "/"


  EksWorkshopIdeBootstrapInstanceLambda:
    Type: Custom::EksWorkshopIdeBootstrapInstanceLambda
    DependsOn:
      - EksWorkshopIdeLambdaExecutionRole
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - EksWorkshopIdeBootstrapInstanceLambdaFunction
          - Arn
      REGION:
        Ref: AWS::Region
      InstanceId:
        Ref: EksWorkshopIdeInstance
      SsmDocument:
        Ref: EksWorkshopIdeSSMDocument
  EksWorkshopIdeBootstrapInstanceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - EksWorkshopIdeLambdaExecutionRole
          - Arn
      Runtime: python3.12
      Environment:
        Variables:
          DiskSize:
            Ref: InstanceVolumeSize
      MemorySize: 256
      Timeout: "900"
      Code:
        ZipFile: "from __future__ import print_function\nimport boto3\nimport json\nimport os\nimport time\nimport traceback\nimport cfnresponse\nimport logging\nlogger = logging.getLogger(__name__)\n\ndef lambda_handler(event, context):\n    print(event.values())\n    print('context: {}'.format(context))\n    responseData = {}\n\n    status = cfnresponse.SUCCESS\n    \n    if event['RequestType'] == 'Delete':\n        responseData = {'Success': 'Custom Resource removed'}\n        cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')              \n    else:\n        try:\n            # Open AWS clients\n            #ec2 = boto3.client('ec2')\n            ssm = boto3.client('ssm')\n\n            instance_id = event['ResourceProperties']['InstanceId']\n\n            ssm_document = event['ResourceProperties']['SsmDocument']\n\n            print('Sending SSM command...')\n\n            response = ssm.send_command(\n              InstanceIds=[instance_id],\n              DocumentName=ssm_document)\n\n            command_id = response['Command']['CommandId']\n\n            waiter = ssm.get_waiter('command_executed')\n\n            waiter.wait(\n              CommandId=command_id,\n              InstanceId=instance_id,\n              WaiterConfig={\n                'Delay': 10,\n                'MaxAttempts': 60\n              }\n            )\n\n            responseData = {'Success': 'Started bootstrapping for instance: '+instance_id}\n            cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')\n            \n        except Exception as e:\n            status = cfnresponse.FAILED\n            print(traceback.format_exc())\n            responseData = {'Error': traceback.format_exc(e)}\n        finally:\n            cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')\n"
  EksWorkshopIdeSSMDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      DocumentFormat: YAML
      Content:
        schemaVersion: "2.2"
        description: Bootstrap CODE-SERVER Instance
        mainSteps:
          - action: aws:runShellScript
            name: EksWorkshopIdebootstrap
            inputs:
              runCommand:
                - !Sub |
                  set -e

                  yum install -y git tar gzip vim nodejs npm make gcc g++ argon2

                  export environment="${Environment}"

                  source <(curl -fsSL https://raw.githubusercontent.com/${RepositoryOwner}/${RepositoryName}/${RepositoryRef}/hack/lib/common-env.sh)

                  dnf copr enable -y @caddy/caddy epel-9-x86_64
                  dnf install -y caddy
                  systemctl enable caddy

                  tee /etc/caddy/Caddyfile <<EOF
                  http://${EksWorkshopIdeCloudFrontDistribution.DomainName} {
                    reverse_proxy 127.0.0.1:8889
                  }
                  EOF

                  systemctl restart caddy

                  tee /etc/profile.d/custom_prompt.sh <<EOF
                  #!/bin/sh

                  export PROMPT_COMMAND='export PS1="\u:\w:$ "'
                  EOF

                  export AWS_REGION="${AWS::Region}"
                  export REPOSITORY_OWNER="${RepositoryOwner}"
                  export REPOSITORY_NAME="${RepositoryName}"
                  export REPOSITORY_REF="${RepositoryRef}"
                  export RESOURCES_PRECREATED="${ResourcesPrecreated}"
                  export ANALYTICS_ENDPOINT="${AnalyticsEndpoint}"

                  curl -fsSL https://raw.githubusercontent.com/${RepositoryOwner}/${RepositoryName}/${RepositoryRef}/lab/scripts/installer.sh | bash

                  cat <<"EOT" | sudo -E -H -u ec2-user bash
                  set -e

                  mkdir -p ~/environment

                  codeServer=$(dnf list installed code-server | wc -l)
                  if [ "$codeServer" -eq "0" ]; then
                    curl -Ls -o /tmp/coder.rpm https://github.com/coder/code-server/releases/download/v${CodeServerVersion}/code-server-${CodeServerVersion}-amd64.rpm
                    sudo rpm -U "/tmp/coder.rpm"
                    sudo systemctl enable code-server@ec2-user
                  fi


                  PASSWORD_SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id "${EksWorkshopIdePassword.Id}" --query 'SecretString' --output text)
                  IDE_PASSWORD=$(echo "$PASSWORD_SECRET_VALUE" | jq -r '.password')
                  HASHED_PASSWORD=$(echo -n "$IDE_PASSWORD" | argon2 saltItWithSalt -l 32 -e)

                  mkdir -p ~/.config/code-server
                  touch ~/.config/code-server/config.yaml
                  tee ~/.config/code-server/config.yaml <<EOF
                  cert: false
                  auth: password
                  hashed-password: "$HASHED_PASSWORD"
                  bind-addr: 127.0.0.1:8889
                  EOF

                  mkdir -p ~/.local/share/code-server/User
                  touch ~/.local/share/code-server/User/settings.json
                  tee ~/.local/share/code-server/User/settings.json <<EOF
                  {
                    "extensions.autoUpdate": false,
                    "extensions.autoCheckUpdates": false,
                    "security.workspace.trust.enabled": false,
                    "task.allowAutomaticTasks": "on",
                    "telemetry.telemetryLevel": "off",
                    "workbench.startupEditor": "terminal"
                  }
                  EOF

                  mkdir -p ~/environment/.vscode
                  tee ~/environment/.vscode/settings.json <<EOF
                  {
                    "files.exclude": {
                      "**/.*": true
                    }
                  }
                  EOF

                  echo '{ "query": { "folder": "/home/ec2-user/environment" } }' > ~/.local/share/code-server/coder.json

                  curl -fsSL https://raw.githubusercontent.com/${RepositoryOwner}/${RepositoryName}/${RepositoryRef}/lab/scripts/setup.sh | bash

                  curl -fsSL https://raw.githubusercontent.com/${RepositoryOwner}/${RepositoryName}/${RepositoryRef}/lab/scripts/banner.sh | bash

                  code-server --install-extension ms-kubernetes-tools.vscode-kubernetes-tools --force
                  code-server --install-extension redhat.vscode-yaml --force

                  EOT

                  systemctl restart code-server@ec2-user

  
  EksWorkshopIdeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: EksWorkshopIdeRole


  
  EksWorkshopIdeInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiParameterStoreName
      InstanceType: t3.small
      BlockDeviceMappings:
        - Ebs:
            VolumeSize: !Ref InstanceVolumeSize
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
          DeviceName: /dev/xvda
      SubnetId: !Ref DefaultSubnetId
      SecurityGroupIds:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref EksWorkshopIdeInstanceProfile
      Tags:
        - Key: type
          Value: eksworkshop-ide
          

  EksWorkshopIdePassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}-password
      GenerateSecretString:
        ExcludeCharacters: "\"@/\\"
        ExcludePunctuation: true
        GenerateStringKey: password
        IncludeSpace: false
        PasswordLength: 32
        SecretStringTemplate: '{"password":""}'
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  EksWorkshopIdeCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 1
        Name: !Ref AWS::StackName
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: all
          EnableAcceptEncodingGzip: False
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - Accept-Charset
              - Authorization
              - Origin
              - Accept
              - Referer
              - Host
              - Accept-Language
              - Accept-Encoding
              - Accept-Datetime
          QueryStringsConfig:
            QueryStringBehavior: all
  EksWorkshopIdeCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: True
        HttpVersion: http2
        CacheBehaviors:
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            Compress: False
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
            TargetOriginId: !Sub CloudFront-${AWS::StackName}
            ViewerProtocolPolicy: allow-all
            PathPattern: "/proxy/*"
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          CachePolicyId: !Ref EksWorkshopIdeCachePolicy
          OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
          TargetOriginId: !Sub CloudFront-${AWS::StackName}
          ViewerProtocolPolicy: allow-all
        Origins:
          - DomainName: !GetAtt EksWorkshopIdeInstance.PublicDnsName
            Id: !Sub CloudFront-${AWS::StackName}
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
Outputs:
  IdeUrl:
    Value: !Sub https://${EksWorkshopIdeCloudFrontDistribution.DomainName}
  IdePasswordSecret:
    Value: !Sub
      - https://console.aws.amazon.com/secretsmanager/secret?name=${SecretName}
      - SecretName: !Sub ${AWS::StackName}-password
  IdePasswordSecretName:
    Value: !Sub ${AWS::StackName}-password
  IdeRole:
    Value: !Sub ${EksWorkshopIdeRole.Arn}
